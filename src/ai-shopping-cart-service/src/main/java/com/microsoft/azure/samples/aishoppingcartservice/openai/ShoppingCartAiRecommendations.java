package com.microsoft.azure.samples.aishoppingcartservice.openai;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;
import com.azure.ai.openai.models.ChatChoice;
import com.azure.ai.openai.models.ChatCompletions;
import com.azure.ai.openai.models.ChatCompletionsOptions;
import com.azure.ai.openai.models.ChatMessage;
import com.azure.ai.openai.models.ChatRole;
import com.azure.core.credential.AzureKeyCredential;

import com.microsoft.azure.samples.aishoppingcartservice.cartitem.CartItem;

public class ShoppingCartAiRecommendations {
  private static final String THE_BASKET_IS = "The basket is: ";

  private final OpenAIClient openAIClient;
  private final String azureOpenAiModelDeploymentId;
  private final double temperature;
  private final double topP;
  private final boolean isGpt4;

  public ShoppingCartAiRecommendations(final String azureOpenAiApiKey,
                                       final String azureOpenAiEndpoint,
                                       final String azureOpenAiModelDeploymentId,
                                       final double temperature,
                                       final double topP,
                                       final boolean isGpt4) {
    this.openAIClient = new OpenAIClientBuilder()
        .credential(new AzureKeyCredential(azureOpenAiApiKey))
        .endpoint(azureOpenAiEndpoint)
        .buildClient();
    this.azureOpenAiModelDeploymentId = azureOpenAiModelDeploymentId;
    this.temperature = temperature;
    this.topP = topP;
    this.isGpt4 = isGpt4;
  }

  public String getAINutritionAnalysis(final List<CartItem> cartItems) {
    // If the model used is GPT-3.5 Turbo instead of GPT-4, we need to add a postfix to the user message
    // to have a message that is more likely to be understood by the model.
    final String userMessagePostfix = this.isGpt4 ? "" : UserMessageConstants.GPT_3_5_AI_NUTRITION_ANALYSIS_POSTFIX;
    return getChatCompletion(SystemMessageConstants.AI_NUTRITION_ANALYSIS, cartItems, userMessagePostfix);
  }

  public String getTop3Recipes(final List<CartItem> cartItems) {
    // If the model used is GPT-3.5 Turbo instead of GPT-4, we need to add a postfix to the user message
    // to have a message that is more likely to be understood by the model.
    final String userMessagePostfix = this.isGpt4 ? "" : UserMessageConstants.GPT_3_5_RECIPES_POSTFIX;
    return getChatCompletion(SystemMessageConstants.RECIPES, cartItems, userMessagePostfix);
  }

  /**
   * Get a chat completion from the OpenAI API
   *
   * @param systemMessage      The system message to be sent to the AI. It provides the context and instructions to the AI
   *                           to generate the chat completion.
   * @param cartItems          The items in the shopping cart.
   * @param userMessagePostfix The postfix to be added to the user message to be sent to the AI. If the postfix is
   *                           blank, the user message is not modified.
   * @return The chat completion generated by the AI.
   */
  private String getChatCompletion(final String systemMessage,
                                   final List<CartItem> cartItems,
                                   final String userMessagePostfix) {
    final List<ChatMessage> chatMessages = Arrays.asList(
        generateSystemChatMessage(systemMessage),
        generateUserChatMessageWithCartItems(cartItems, userMessagePostfix)
    );
    final ChatCompletionsOptions chatCompletionsOptions = new ChatCompletionsOptions(chatMessages)
        .setTemperature(this.temperature)
        .setTopP(this.topP)
        .setN(1); // Number of chat completion choices to be generated
    final ChatCompletions chatCompletions =
        this.openAIClient.getChatCompletions(this.azureOpenAiModelDeploymentId, chatCompletionsOptions);
    return chatCompletions
        .getChoices()
        .stream()
        .map(ChatChoice::getMessage)
        .map(ChatMessage::getContent)
        .collect(Collectors.joining("\n"));
  }

  private ChatMessage generateSystemChatMessage(final String systemMessage) {
    final ChatMessage chatMessage = new ChatMessage(ChatRole.SYSTEM);
    chatMessage.setContent(systemMessage);
    return chatMessage;
  }

  /**
   * Generate a user chat message with the items in the shopping cart.
   * <p>
   * If the prefix is blank, the user message will be "The basket is: <cart items>", where <cart items> is a comma
   * separated list of the items in the shopping cart.
   * <p>
   * If the prefix is not blank, the user message will be "The basket is: <cart items>. <prefix>", where <cart items>
   * is a comma separated list of the items in the shopping cart and <prefix> is the prefix.
   *
   * @param cartItems          The items in the shopping cart.
   * @param userMessagePostfix The postfix to be added to the user message to be sent to the AI. If the postfix is
   *                           blank, the user message is not modified.
   * @return The user chat message with the items in the shopping cart.
   */
  private ChatMessage generateUserChatMessageWithCartItems(final List<CartItem> cartItems,
                                                           final String userMessagePostfix) {
    final ChatMessage chatMessage = new ChatMessage(ChatRole.USER);
    String messageContent = THE_BASKET_IS + getCartItemsAsStringWithCommaSeparatedValues(cartItems);
    if (userMessagePostfix != null && !userMessagePostfix.isEmpty()) {
      messageContent += ". " + userMessagePostfix;
    }
    chatMessage.setContent(messageContent);
    return chatMessage;
  }

  private String getCartItemsAsStringWithCommaSeparatedValues(final List<CartItem> cartItems) {
    return cartItems
        .stream()
        .map(CartItem::getName)
        .map(String::toLowerCase)
        .map(String::trim)
        .collect(Collectors.joining(", "));
  }
}
